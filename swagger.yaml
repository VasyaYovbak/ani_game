openapi: 3.0.0
info:
  version: 3.0.x-oas3
  title: AnimeGame
  description: Card game to chill with friends.
servers:
  - url: http://anigame
  - url: https://virtserver.swaggerhub.com/Speedruners/AniGame/3.0.x
paths:

  /registration:
    post:
      tags:
        - User
      summary: Add new user to database
      requestBody:
        description: Registration
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: vasaTop123@meta.ua
                username:
                  type: string
                  example: Darkstyle
                password:
                  type: string
                  example: 12365478
                gender:
                  type: string
                  enum: [ male,female ]

      responses:
        '200':
          description: Successfully registered
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                    example: vasaTop123@meta.ua
                  username:
                    type: string
                    example: Darkstyle
                  gender:
                    type: string
                    enum: [ male,female ]
        '400':
          description: Username or email already exist

  /login:
    description: Login existing user
    post:
      tags:
        - User
      summary: Login existing user
      requestBody:
        content:
          aplacation/json:
            schema:
              properties:

                username:
                  type: string

                password:
                  type: string

      responses:
        '200':
          description: Successfully logined
          content:
            aplacation/json:
              schema:
                properties:
                  access_token:
                    type: string

                  refresh_token:
                    type: string
        '401':
          description: You've already authorized

        '403':
          description: Username or password is not correct

  /profile/{id}:
    description: Return data for user(id) profile
    get:
      summary: Return profile
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                properties:
                  user_id:
                    type: integer
                  userName:
                    type: string
                    example: Darkstyle
                  email:
                    type: string
                    example: vasaTop123@meta.ua
                  gender:
                    type: string
                    enum: [ male,female ]
                  image_url:
                    type: string
                    example: https://pm1.narvii.com/7303/9baf944e3ede78430e21b79547c00878d7691437r1-448-454v2_hq.jpg
                  achievements:
                    type: array
                    items:
                      $ref: '#/components/schemas/Achievement'
        '404':
          description: User not found

  /profile/{id}/change/password:
    description: Change user password
    put:
      tags:
        - User
      summary: Request for change password
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                previous_password:
                  type: string
                  minLength: 8
                new_password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Password was changed successfully
        '401':
          description: Unathorized
        '403':
          description: You can not change another user password
        '404':
          description: User not found
      security:
        - JWTAuth: [ ]

  /profile/{id}/change:
    put:
      tags:
        - User
      summary: Request for change image or username
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                image_url:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: Profile was changed successfully
        '401':
          description: Authorization required
        '400':
          description: Username is not available
        '404':
          description: Profile not found
      security:
        - JWTAuth: [ ]

  /game/start:
    description: Function for adding user in queue (need to retrieve user rating from database and add this user to queue)
    post:
      tags:
        - Game
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                user_id:
                  type: integer
      responses:
        '200':
          description: Successfully added to queue (redirect to page with game)
          content:
            application/json:
              schema:
                properties:
                  redirect:
                    type: string
                    example: http://anigame/game/{game_id}/
        '401':
          description: Unauthorized
        '500':
          description: Something went wrong -)
      security:
        - JWTAuth: [ ]

  /game/{game_id}/:
    description: Send question to opponent
    get:
      tags:
        - Game
      parameters:
        - in: path
          name: game_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Question was sent successfully
          content:
            aplication/json:
              schema:
                properties:
                  ArrayCards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  Enemy_guest_character:
                    $ref: '#/components/schemas/Card'
        '404':
          description: Game not found

      security:
        - JWTAuth: [ ]
  /game/{game_id}/sendquestion:
    description: Send a question to opponent
    post:
      tags:
        - Game
      parameters:
        - in: path
          name: game_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                text:
                  type: string
      responses:
        '200':
          description: Question was sent successfully
          content:
            aplication/json:
              schema:
                properties:
                  text:
                    type: string
      security:
        - JWTAuth: [ ]

  /game/{game_id}/sendrequest:
    description: Send request to server (check for victory)
    put:
      tags:
        - Game
      parameters:
        - in: path
          name: game_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                cardsArray:
                  type: array
                  items:
                    $ref: '#/components/schemas/Card'
      responses:
        '200':
          description: Request was sent successfully
          content:
            aplication/json:
              schema:
                properties:
                  isWin:
                    type: boolean
      security:
        - JWTAuth: [ ]

  /achievements:
    description: List of achievements
    get:
      tags:
        - Achievement
      responses:
        '200':
          description: question sended successfuly
          content:
            aplication/json:
              schema:
                properties:
                  achievement_id:
                    type: integer

                  achievement_name:
                    type: string

                  description:
                    type: string

                  experience:
                    type: integer

                  image_url:
                    type: string
                example:
                  - achievement_id: 1
                    achievement_name: Kage
                    description: Only highly skilled shinoby can receive this achievement
                    experience: 1500

                  - achievement_id: 1
                    achievement_name: S - rank shinoby
                    description: This one is for those who have less expirience than hokage but they are higly skilled too
                    experience: 900

  /achievement:
    post:
      tags:
        - Achievement
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                Achievements_array:
                  type: array
                  items:
                    properties:
                      achievement_name:
                        type: string

                      description:
                        type: string

                      experience:
                        type: integer

                      image_url:
                        type: string


      responses:
        '200':
          description: Successfully added
        '401':
          description: Unauthorized
        '400':
          description: Achievement already exist
      security:
        - AdminAuth: [ ]

  /achievement/{achievement_id}:
    description: Achievement details
    get:
      tags:
        - Achievement
      parameters:
        - in: path
          name: achievement_id
          schema:
            type: integer
          required: true

      responses:
        '202':
          description: Success
          content:
            aplication/json:
              schema:
                properties:
                  achievement_id:
                    type: integer

                  achievement_name:
                    type: string

                  description:
                    type: string

                  experience:
                    type: integer

                  image_url:
                    type: string

              example:
                - achievement_id: 1
                  achievement_name: Kage
                  description: Only highly skilled shinoby can receive this achievement
                  experience: 1500
        '404':
          description: Achievement not found

    put:
      tags:
        - Achievement
      parameters:
        - in: path
          name: achievement_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                achievement_name:
                  type: string

                description:
                  type: string

                experience:
                  type: integer

                image_url:
                  type: string


      responses:
        '202':
          description: Success
          content:
            aplication/json:
              schema:
                properties:
                  achievement_id:
                    type: integer

                  achievement_name:
                    type: string

                  description:
                    type: string

                  experience:
                    type: integer
        '401':
          description: Unauthorized

        '404':
          description: Achievement not found

      security:
        - AdminAuth: [ ]

    delete:
      tags:
        - Achievement
      parameters:
        - in: path
          name: achievement_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Success deleted
          content:
            aplication/json:
              schema:
                properties:
                  achievement_id:
                    type: integer

                  achievement_name:
                    type: string

                  description:
                    type: string

                  experience:
                    type: integer

        '401':
          description: Unauthorized

        '404':
          description: Achievement not found
      security:
        - AdminAuth: [ ]


  /characters:
    description: List of achievements
    get:
      tags:
        - Character
      responses:
        '200':
          description: question sended successfuly
          content:
            aplication/json:
              schema:
                properties:
                  Characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
  /character:
    post:
      tags:
        - Character
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                Characters_array:
                  type: array
                  items:
                    $ref: '#/components/schemas/Character'
      responses:
        '200':
          description: Successfully added
          content:
            aplication/json:
              schema:
                properties:
                  Characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
        '401':
          description: Unauthorized
        '400':
          description: Character already exist
      security:
        - JWTAuth: [ ]

  /character/{character_id}:
    description: List of achievements

    get:
      tags:
        - Character
      parameters:
        - in: path
          name: character_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: question sended successfuly
          content:
            aplication/json:
              schema:
                properties:
                  Characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
    put:
      tags:
        - Character
      parameters:
        - in: path
          name: character_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          aplication/json:
            schema:
              properties:
                Characters:
                  type: array
                  items:
                    $ref: '#/components/schemas/Character'


      responses:
        '202':
          description: Success
          content:
            aplication/json:
              schema:
                properties:
                  Characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
        '401':
          description: Unauthorized

        '404':
          description: Character not found
      security:
        - JWTAuth: [ ]

    delete:
      tags:
        - Character
      parameters:
        - in: path
          name: character_id
          schema:
            type: integer
          required: true

      responses:
        '200':
          description: Successfully deleted
          content:
            aplication/json:
              schema:
                properties:
                  Characters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Character'
        '401':
          description: Unauthorized
        '404':
          description: Character not found
      security:
        - JWTAuth: [ ]



components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
          example: Darkstyle
        email:
          type: string
          example: vasaTop123@meta.ua
        password:
          type: string
          minimum: 8
          example: 123654df
        gender:
          type: string
          enum: [ male,female ]
        is_admin:
          type: integer
          example: 1

    Character:
      type: object
      properties:
        character_id:
          type: integer

        character_name:
          type: string
        country:
          type: string
        is_alive:
          type: boolean
        is_good:
          type: boolean
        image:
          type: string
    Card:
      type: object
      properties:
        card_id:
          type: integer
        character:
          $ref: '#/components/schemas/Character'
        is_active:
          type: boolean

    Achievement:
      type: object
      properties:
        achive_id:
          type: integer
          example: 1
        achive_name:
          type: string
          example: win first game
        experience:
          type: integer
          example: 10
        image_url:
          type: string
          example: https://img2.freepng.ru/20171128/d7f/gold-cu

  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: access_token

    AdminAuth:
      type: http
      scheme: basic